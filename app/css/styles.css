/*
  	Name: Test for Povio Labs
  	Version: 1.0
  	Author: Andrej Vajagoc
  	Website: http://drejcreative.com
  */
@import url("https://fonts.googleapis.com/css?family=Lato:400,700|Montserrat|Roboto:400,500,700");
*,
:after,
:before {
  -webkit-box-sizing: border-box;
          box-sizing: border-box; }

.clearfix:after, .clearfix:before {
  content: '';
  display: table; }

.clearfix:after {
  clear: both;
  display: block; }

.icon {
  font-size: 10px; }

.icon:before {
  content: ' ';
  vertical-align: middle;
  display: inline-block;
  background-image: url("../images/svg/sprite.svg");
  background-repeat: no-repeat;
  background-size: 6.8em 33.2em; }

.no-svg .icon:before {
  background-image: url("../images/svg/sprite.png"); }

.icon.icon-dine:before {
  background-position: 0em 0em;
  width: 2.1em;
  height: 2.1em; }

.icon.icon-drink:before {
  background-position: 0em -2.1em;
  width: 2em;
  height: 2.2em; }

.icon.icon-explore-active:before {
  background-position: 0em -4.3em;
  width: 1.6em;
  height: 2.1em; }

.icon.icon-explore-active_2:before {
  background-position: 0em -6.4em;
  width: 1.6em;
  height: 2.1em; }

.icon.icon-handshake:before {
  background-position: 0em -8.5em;
  width: 2.6em;
  height: 1.9em; }

.icon.icon-house:before {
  background-position: 0em -10.4em;
  width: 2.1em;
  height: 1.9em; }

.icon.icon-medical:before {
  background-position: 0em -12.3em;
  width: 2.2em;
  height: 2em; }

.icon.icon-messages:before {
  background-position: 0em -14.3em;
  width: 2.1em;
  height: 2.1em; }

.icon.icon-my-location:before {
  background-position: 0em -16.4em;
  width: 2.4em;
  height: 2.4em; }

.icon.icon-save:before {
  background-position: 0em -18.8em;
  width: 2.1em;
  height: 2.1em; }

.icon.icon-save-copy:before {
  background-position: 0em -20.9em;
  width: 2.1em;
  height: 2.1em; }

.icon.icon-save-copy-2:before {
  background-position: 0em -23em;
  width: 2.1em;
  height: 2.1em; }

.icon.icon-search-grey:before {
  background-position: 0em -25.1em;
  width: 2.4em;
  height: 2.4em; }

.icon.icon-trips:before {
  background-position: 0em -27.5em;
  width: 2.1em;
  height: 2.1em; }

.icon.logo:before {
  background-position: 0em -29.6em;
  width: 6.8em;
  height: 3.53em; }

.header {
  width: 100%;
  height: 80px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  font-family: "Roboto", sans-serif;
  font-weight: 500;
  font-size: 17px;
  line-height: 25px; }
  .header__link {
    text-decoration: none; }
  .header__logo {
    display: inline-block;
    margin-left: 30px;
    margin-top: -10px; }
  .header__explore {
    display: inline-block;
    margin-left: 30px; }
    .header__explore--icon {
      padding-right: 12px; }
    .header__explore--text {
      color: #47ccb0; }
  .header__trips {
    display: inline-block;
    margin-left: 30px; }
    .header__trips--text {
      color: #9298a0; }
    .header__trips--icon {
      padding-right: 12px; }
  .header__messages {
    display: inline-block;
    margin-left: 30px; }
    .header__messages--text {
      color: #9298a0; }
    .header__messages--icon {
      margin-right: 12px;
      display: inline-block;
      width: 25px;
      -webkit-border-radius: 50%;
              border-radius: 50%;
      padding-left: 7px;
      color: #ffffff;
      background-color: #47ccb0;
      -webkit-box-shadow: 0 7px 15px 0 rgba(71, 204, 175, 0.4);
              box-shadow: 0 7px 15px 0 rgba(71, 204, 175, 0.4); }
  .header__user {
    margin-left: auto;
    margin-right: 10px;
    display: -webkit-box;
    display: -webkit-flex;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-align: center;
    -webkit-align-items: center;
        -ms-flex-align: center;
            align-items: center; }
    .header__user--name {
      color: #9298a0;
      float: left; }
    .header__user--image {
      margin-left: 20px;
      width: 54px;
      height: 54px;
      -webkit-border-radius: 50%;
              border-radius: 50%;
      float: left; }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
